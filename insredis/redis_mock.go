// Code generated by MockGen. DO NOT EDIT.
// Source: ./insredis/redis.go

// Package insredis is a generated GoMock package.
package insredis

import (
	reflect "reflect"
	time "time"

	redis "github.com/go-redis/redis"
	gomock "github.com/golang/mock/gomock"
)

// MockRedisInterface is a mock of RedisInterface interface.
type MockRedisInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRedisInterfaceMockRecorder
}

// MockRedisInterfaceMockRecorder is the mock recorder for MockRedisInterface.
type MockRedisInterfaceMockRecorder struct {
	mock *MockRedisInterface
}

// NewMockRedisInterface creates a new mock instance.
func NewMockRedisInterface(ctrl *gomock.Controller) *MockRedisInterface {
	mock := &MockRedisInterface{ctrl: ctrl}
	mock.recorder = &MockRedisInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisInterface) EXPECT() *MockRedisInterfaceMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockRedisInterface) Append(key, value string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", key, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockRedisInterfaceMockRecorder) Append(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockRedisInterface)(nil).Append), key, value)
}

// BLPop mocks base method.
func (m *MockRedisInterface) BLPop(timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BLPop", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// BLPop indicates an expected call of BLPop.
func (mr *MockRedisInterfaceMockRecorder) BLPop(timeout interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BLPop", reflect.TypeOf((*MockRedisInterface)(nil).BLPop), varargs...)
}

// BRPop mocks base method.
func (m *MockRedisInterface) BRPop(timeout time.Duration, keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BRPop", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// BRPop indicates an expected call of BRPop.
func (mr *MockRedisInterfaceMockRecorder) BRPop(timeout interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BRPop", reflect.TypeOf((*MockRedisInterface)(nil).BRPop), varargs...)
}

// BRPopLPush mocks base method.
func (m *MockRedisInterface) BRPopLPush(source, destination string, timeout time.Duration) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BRPopLPush", source, destination, timeout)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// BRPopLPush indicates an expected call of BRPopLPush.
func (mr *MockRedisInterfaceMockRecorder) BRPopLPush(source, destination, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BRPopLPush", reflect.TypeOf((*MockRedisInterface)(nil).BRPopLPush), source, destination, timeout)
}

// BZPopMax mocks base method.
func (m *MockRedisInterface) BZPopMax(timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BZPopMax", varargs...)
	ret0, _ := ret[0].(*redis.ZWithKeyCmd)
	return ret0
}

// BZPopMax indicates an expected call of BZPopMax.
func (mr *MockRedisInterfaceMockRecorder) BZPopMax(timeout interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BZPopMax", reflect.TypeOf((*MockRedisInterface)(nil).BZPopMax), varargs...)
}

// BZPopMin mocks base method.
func (m *MockRedisInterface) BZPopMin(timeout time.Duration, keys ...string) *redis.ZWithKeyCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{timeout}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BZPopMin", varargs...)
	ret0, _ := ret[0].(*redis.ZWithKeyCmd)
	return ret0
}

// BZPopMin indicates an expected call of BZPopMin.
func (mr *MockRedisInterfaceMockRecorder) BZPopMin(timeout interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{timeout}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BZPopMin", reflect.TypeOf((*MockRedisInterface)(nil).BZPopMin), varargs...)
}

// BgRewriteAOF mocks base method.
func (m *MockRedisInterface) BgRewriteAOF() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BgRewriteAOF")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// BgRewriteAOF indicates an expected call of BgRewriteAOF.
func (mr *MockRedisInterfaceMockRecorder) BgRewriteAOF() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BgRewriteAOF", reflect.TypeOf((*MockRedisInterface)(nil).BgRewriteAOF))
}

// BgSave mocks base method.
func (m *MockRedisInterface) BgSave() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BgSave")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// BgSave indicates an expected call of BgSave.
func (mr *MockRedisInterfaceMockRecorder) BgSave() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BgSave", reflect.TypeOf((*MockRedisInterface)(nil).BgSave))
}

// BitCount mocks base method.
func (m *MockRedisInterface) BitCount(key string, bitCount *redis.BitCount) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BitCount", key, bitCount)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitCount indicates an expected call of BitCount.
func (mr *MockRedisInterfaceMockRecorder) BitCount(key, bitCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitCount", reflect.TypeOf((*MockRedisInterface)(nil).BitCount), key, bitCount)
}

// BitOpAnd mocks base method.
func (m *MockRedisInterface) BitOpAnd(destKey string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{destKey}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitOpAnd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitOpAnd indicates an expected call of BitOpAnd.
func (mr *MockRedisInterfaceMockRecorder) BitOpAnd(destKey interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destKey}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpAnd", reflect.TypeOf((*MockRedisInterface)(nil).BitOpAnd), varargs...)
}

// BitOpNot mocks base method.
func (m *MockRedisInterface) BitOpNot(destKey, key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BitOpNot", destKey, key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitOpNot indicates an expected call of BitOpNot.
func (mr *MockRedisInterfaceMockRecorder) BitOpNot(destKey, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpNot", reflect.TypeOf((*MockRedisInterface)(nil).BitOpNot), destKey, key)
}

// BitOpOr mocks base method.
func (m *MockRedisInterface) BitOpOr(destKey string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{destKey}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitOpOr", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitOpOr indicates an expected call of BitOpOr.
func (mr *MockRedisInterfaceMockRecorder) BitOpOr(destKey interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destKey}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpOr", reflect.TypeOf((*MockRedisInterface)(nil).BitOpOr), varargs...)
}

// BitOpXor mocks base method.
func (m *MockRedisInterface) BitOpXor(destKey string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{destKey}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitOpXor", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitOpXor indicates an expected call of BitOpXor.
func (mr *MockRedisInterfaceMockRecorder) BitOpXor(destKey interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destKey}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitOpXor", reflect.TypeOf((*MockRedisInterface)(nil).BitOpXor), varargs...)
}

// BitPos mocks base method.
func (m *MockRedisInterface) BitPos(key string, bit int64, pos ...int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key, bit}
	for _, a := range pos {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BitPos", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// BitPos indicates an expected call of BitPos.
func (mr *MockRedisInterfaceMockRecorder) BitPos(key, bit interface{}, pos ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key, bit}, pos...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BitPos", reflect.TypeOf((*MockRedisInterface)(nil).BitPos), varargs...)
}

// ClientGetName mocks base method.
func (m *MockRedisInterface) ClientGetName() *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientGetName")
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ClientGetName indicates an expected call of ClientGetName.
func (mr *MockRedisInterfaceMockRecorder) ClientGetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientGetName", reflect.TypeOf((*MockRedisInterface)(nil).ClientGetName))
}

// ClientID mocks base method.
func (m *MockRedisInterface) ClientID() *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientID")
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClientID indicates an expected call of ClientID.
func (mr *MockRedisInterfaceMockRecorder) ClientID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientID", reflect.TypeOf((*MockRedisInterface)(nil).ClientID))
}

// ClientKill mocks base method.
func (m *MockRedisInterface) ClientKill(ipPort string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientKill", ipPort)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClientKill indicates an expected call of ClientKill.
func (mr *MockRedisInterfaceMockRecorder) ClientKill(ipPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientKill", reflect.TypeOf((*MockRedisInterface)(nil).ClientKill), ipPort)
}

// ClientKillByFilter mocks base method.
func (m *MockRedisInterface) ClientKillByFilter(keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClientKillByFilter", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClientKillByFilter indicates an expected call of ClientKillByFilter.
func (mr *MockRedisInterfaceMockRecorder) ClientKillByFilter(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientKillByFilter", reflect.TypeOf((*MockRedisInterface)(nil).ClientKillByFilter), keys...)
}

// ClientList mocks base method.
func (m *MockRedisInterface) ClientList() *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientList")
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ClientList indicates an expected call of ClientList.
func (mr *MockRedisInterfaceMockRecorder) ClientList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientList", reflect.TypeOf((*MockRedisInterface)(nil).ClientList))
}

// ClientPause mocks base method.
func (m *MockRedisInterface) ClientPause(dur time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientPause", dur)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ClientPause indicates an expected call of ClientPause.
func (mr *MockRedisInterfaceMockRecorder) ClientPause(dur interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientPause", reflect.TypeOf((*MockRedisInterface)(nil).ClientPause), dur)
}

// Close mocks base method.
func (m *MockRedisInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRedisInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRedisInterface)(nil).Close))
}

// ClusterAddSlots mocks base method.
func (m *MockRedisInterface) ClusterAddSlots(slots ...int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range slots {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClusterAddSlots", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterAddSlots indicates an expected call of ClusterAddSlots.
func (mr *MockRedisInterfaceMockRecorder) ClusterAddSlots(slots ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAddSlots", reflect.TypeOf((*MockRedisInterface)(nil).ClusterAddSlots), slots...)
}

// ClusterAddSlotsRange mocks base method.
func (m *MockRedisInterface) ClusterAddSlotsRange(min, max int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterAddSlotsRange", min, max)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterAddSlotsRange indicates an expected call of ClusterAddSlotsRange.
func (mr *MockRedisInterfaceMockRecorder) ClusterAddSlotsRange(min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterAddSlotsRange", reflect.TypeOf((*MockRedisInterface)(nil).ClusterAddSlotsRange), min, max)
}

// ClusterCountFailureReports mocks base method.
func (m *MockRedisInterface) ClusterCountFailureReports(nodeID string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterCountFailureReports", nodeID)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClusterCountFailureReports indicates an expected call of ClusterCountFailureReports.
func (mr *MockRedisInterfaceMockRecorder) ClusterCountFailureReports(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterCountFailureReports", reflect.TypeOf((*MockRedisInterface)(nil).ClusterCountFailureReports), nodeID)
}

// ClusterCountKeysInSlot mocks base method.
func (m *MockRedisInterface) ClusterCountKeysInSlot(slot int) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterCountKeysInSlot", slot)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClusterCountKeysInSlot indicates an expected call of ClusterCountKeysInSlot.
func (mr *MockRedisInterfaceMockRecorder) ClusterCountKeysInSlot(slot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterCountKeysInSlot", reflect.TypeOf((*MockRedisInterface)(nil).ClusterCountKeysInSlot), slot)
}

// ClusterDelSlots mocks base method.
func (m *MockRedisInterface) ClusterDelSlots(slots ...int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range slots {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClusterDelSlots", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterDelSlots indicates an expected call of ClusterDelSlots.
func (mr *MockRedisInterfaceMockRecorder) ClusterDelSlots(slots ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterDelSlots", reflect.TypeOf((*MockRedisInterface)(nil).ClusterDelSlots), slots...)
}

// ClusterDelSlotsRange mocks base method.
func (m *MockRedisInterface) ClusterDelSlotsRange(min, max int) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterDelSlotsRange", min, max)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterDelSlotsRange indicates an expected call of ClusterDelSlotsRange.
func (mr *MockRedisInterfaceMockRecorder) ClusterDelSlotsRange(min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterDelSlotsRange", reflect.TypeOf((*MockRedisInterface)(nil).ClusterDelSlotsRange), min, max)
}

// ClusterFailover mocks base method.
func (m *MockRedisInterface) ClusterFailover() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterFailover")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterFailover indicates an expected call of ClusterFailover.
func (mr *MockRedisInterfaceMockRecorder) ClusterFailover() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterFailover", reflect.TypeOf((*MockRedisInterface)(nil).ClusterFailover))
}

// ClusterForget mocks base method.
func (m *MockRedisInterface) ClusterForget(nodeID string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterForget", nodeID)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterForget indicates an expected call of ClusterForget.
func (mr *MockRedisInterfaceMockRecorder) ClusterForget(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterForget", reflect.TypeOf((*MockRedisInterface)(nil).ClusterForget), nodeID)
}

// ClusterGetKeysInSlot mocks base method.
func (m *MockRedisInterface) ClusterGetKeysInSlot(slot, count int) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterGetKeysInSlot", slot, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ClusterGetKeysInSlot indicates an expected call of ClusterGetKeysInSlot.
func (mr *MockRedisInterfaceMockRecorder) ClusterGetKeysInSlot(slot, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterGetKeysInSlot", reflect.TypeOf((*MockRedisInterface)(nil).ClusterGetKeysInSlot), slot, count)
}

// ClusterInfo mocks base method.
func (m *MockRedisInterface) ClusterInfo() *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterInfo")
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ClusterInfo indicates an expected call of ClusterInfo.
func (mr *MockRedisInterfaceMockRecorder) ClusterInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterInfo", reflect.TypeOf((*MockRedisInterface)(nil).ClusterInfo))
}

// ClusterKeySlot mocks base method.
func (m *MockRedisInterface) ClusterKeySlot(key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterKeySlot", key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ClusterKeySlot indicates an expected call of ClusterKeySlot.
func (mr *MockRedisInterfaceMockRecorder) ClusterKeySlot(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterKeySlot", reflect.TypeOf((*MockRedisInterface)(nil).ClusterKeySlot), key)
}

// ClusterMeet mocks base method.
func (m *MockRedisInterface) ClusterMeet(host, port string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterMeet", host, port)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterMeet indicates an expected call of ClusterMeet.
func (mr *MockRedisInterfaceMockRecorder) ClusterMeet(host, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterMeet", reflect.TypeOf((*MockRedisInterface)(nil).ClusterMeet), host, port)
}

// ClusterNodes mocks base method.
func (m *MockRedisInterface) ClusterNodes() *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterNodes")
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ClusterNodes indicates an expected call of ClusterNodes.
func (mr *MockRedisInterfaceMockRecorder) ClusterNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterNodes", reflect.TypeOf((*MockRedisInterface)(nil).ClusterNodes))
}

// ClusterReplicate mocks base method.
func (m *MockRedisInterface) ClusterReplicate(nodeID string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterReplicate", nodeID)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterReplicate indicates an expected call of ClusterReplicate.
func (mr *MockRedisInterfaceMockRecorder) ClusterReplicate(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterReplicate", reflect.TypeOf((*MockRedisInterface)(nil).ClusterReplicate), nodeID)
}

// ClusterResetHard mocks base method.
func (m *MockRedisInterface) ClusterResetHard() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterResetHard")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterResetHard indicates an expected call of ClusterResetHard.
func (mr *MockRedisInterfaceMockRecorder) ClusterResetHard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterResetHard", reflect.TypeOf((*MockRedisInterface)(nil).ClusterResetHard))
}

// ClusterResetSoft mocks base method.
func (m *MockRedisInterface) ClusterResetSoft() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterResetSoft")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterResetSoft indicates an expected call of ClusterResetSoft.
func (mr *MockRedisInterfaceMockRecorder) ClusterResetSoft() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterResetSoft", reflect.TypeOf((*MockRedisInterface)(nil).ClusterResetSoft))
}

// ClusterSaveConfig mocks base method.
func (m *MockRedisInterface) ClusterSaveConfig() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterSaveConfig")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ClusterSaveConfig indicates an expected call of ClusterSaveConfig.
func (mr *MockRedisInterfaceMockRecorder) ClusterSaveConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterSaveConfig", reflect.TypeOf((*MockRedisInterface)(nil).ClusterSaveConfig))
}

// ClusterSlaves mocks base method.
func (m *MockRedisInterface) ClusterSlaves(nodeID string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterSlaves", nodeID)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ClusterSlaves indicates an expected call of ClusterSlaves.
func (mr *MockRedisInterfaceMockRecorder) ClusterSlaves(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterSlaves", reflect.TypeOf((*MockRedisInterface)(nil).ClusterSlaves), nodeID)
}

// ClusterSlots mocks base method.
func (m *MockRedisInterface) ClusterSlots() *redis.ClusterSlotsCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterSlots")
	ret0, _ := ret[0].(*redis.ClusterSlotsCmd)
	return ret0
}

// ClusterSlots indicates an expected call of ClusterSlots.
func (mr *MockRedisInterfaceMockRecorder) ClusterSlots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterSlots", reflect.TypeOf((*MockRedisInterface)(nil).ClusterSlots))
}

// Command mocks base method.
func (m *MockRedisInterface) Command() *redis.CommandsInfoCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Command")
	ret0, _ := ret[0].(*redis.CommandsInfoCmd)
	return ret0
}

// Command indicates an expected call of Command.
func (mr *MockRedisInterfaceMockRecorder) Command() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockRedisInterface)(nil).Command))
}

// ConfigGet mocks base method.
func (m *MockRedisInterface) ConfigGet(parameter string) *redis.SliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigGet", parameter)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

// ConfigGet indicates an expected call of ConfigGet.
func (mr *MockRedisInterfaceMockRecorder) ConfigGet(parameter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigGet", reflect.TypeOf((*MockRedisInterface)(nil).ConfigGet), parameter)
}

// ConfigResetStat mocks base method.
func (m *MockRedisInterface) ConfigResetStat() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigResetStat")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ConfigResetStat indicates an expected call of ConfigResetStat.
func (mr *MockRedisInterfaceMockRecorder) ConfigResetStat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigResetStat", reflect.TypeOf((*MockRedisInterface)(nil).ConfigResetStat))
}

// ConfigRewrite mocks base method.
func (m *MockRedisInterface) ConfigRewrite() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigRewrite")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ConfigRewrite indicates an expected call of ConfigRewrite.
func (mr *MockRedisInterfaceMockRecorder) ConfigRewrite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigRewrite", reflect.TypeOf((*MockRedisInterface)(nil).ConfigRewrite))
}

// ConfigSet mocks base method.
func (m *MockRedisInterface) ConfigSet(parameter, value string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigSet", parameter, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ConfigSet indicates an expected call of ConfigSet.
func (mr *MockRedisInterfaceMockRecorder) ConfigSet(parameter, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigSet", reflect.TypeOf((*MockRedisInterface)(nil).ConfigSet), parameter, value)
}

// DBSize mocks base method.
func (m *MockRedisInterface) DBSize() *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBSize")
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// DBSize indicates an expected call of DBSize.
func (mr *MockRedisInterfaceMockRecorder) DBSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBSize", reflect.TypeOf((*MockRedisInterface)(nil).DBSize))
}

// DebugObject mocks base method.
func (m *MockRedisInterface) DebugObject(key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugObject", key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// DebugObject indicates an expected call of DebugObject.
func (mr *MockRedisInterfaceMockRecorder) DebugObject(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugObject", reflect.TypeOf((*MockRedisInterface)(nil).DebugObject), key)
}

// Decr mocks base method.
func (m *MockRedisInterface) Decr(key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decr", key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Decr indicates an expected call of Decr.
func (mr *MockRedisInterfaceMockRecorder) Decr(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockRedisInterface)(nil).Decr), key)
}

// DecrBy mocks base method.
func (m *MockRedisInterface) DecrBy(key string, decrement int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrBy", key, decrement)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// DecrBy indicates an expected call of DecrBy.
func (mr *MockRedisInterfaceMockRecorder) DecrBy(key, decrement interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrBy", reflect.TypeOf((*MockRedisInterface)(nil).DecrBy), key, decrement)
}

// Del mocks base method.
func (m *MockRedisInterface) Del(keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockRedisInterfaceMockRecorder) Del(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockRedisInterface)(nil).Del), keys...)
}

// Dump mocks base method.
func (m *MockRedisInterface) Dump(key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump", key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Dump indicates an expected call of Dump.
func (mr *MockRedisInterfaceMockRecorder) Dump(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockRedisInterface)(nil).Dump), key)
}

// Echo mocks base method.
func (m *MockRedisInterface) Echo(message interface{}) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Echo", message)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Echo indicates an expected call of Echo.
func (mr *MockRedisInterfaceMockRecorder) Echo(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockRedisInterface)(nil).Echo), message)
}

// Eval mocks base method.
func (m *MockRedisInterface) Eval(script string, keys []string, args ...interface{}) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{script, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Eval", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// Eval indicates an expected call of Eval.
func (mr *MockRedisInterfaceMockRecorder) Eval(script, keys interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{script, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockRedisInterface)(nil).Eval), varargs...)
}

// EvalSha mocks base method.
func (m *MockRedisInterface) EvalSha(sha1 string, keys []string, args ...interface{}) *redis.Cmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{sha1, keys}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EvalSha", varargs...)
	ret0, _ := ret[0].(*redis.Cmd)
	return ret0
}

// EvalSha indicates an expected call of EvalSha.
func (mr *MockRedisInterfaceMockRecorder) EvalSha(sha1, keys interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sha1, keys}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalSha", reflect.TypeOf((*MockRedisInterface)(nil).EvalSha), varargs...)
}

// Exists mocks base method.
func (m *MockRedisInterface) Exists(keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exists", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockRedisInterfaceMockRecorder) Exists(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRedisInterface)(nil).Exists), keys...)
}

// Expire mocks base method.
func (m *MockRedisInterface) Expire(key string, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", key, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockRedisInterfaceMockRecorder) Expire(key, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockRedisInterface)(nil).Expire), key, expiration)
}

// ExpireAt mocks base method.
func (m *MockRedisInterface) ExpireAt(key string, tm time.Time) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireAt", key, tm)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// ExpireAt indicates an expected call of ExpireAt.
func (mr *MockRedisInterfaceMockRecorder) ExpireAt(key, tm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireAt", reflect.TypeOf((*MockRedisInterface)(nil).ExpireAt), key, tm)
}

// FlushAll mocks base method.
func (m *MockRedisInterface) FlushAll() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAll")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FlushAll indicates an expected call of FlushAll.
func (mr *MockRedisInterfaceMockRecorder) FlushAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAll", reflect.TypeOf((*MockRedisInterface)(nil).FlushAll))
}

// FlushAllAsync mocks base method.
func (m *MockRedisInterface) FlushAllAsync() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAllAsync")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FlushAllAsync indicates an expected call of FlushAllAsync.
func (mr *MockRedisInterfaceMockRecorder) FlushAllAsync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAllAsync", reflect.TypeOf((*MockRedisInterface)(nil).FlushAllAsync))
}

// FlushDB mocks base method.
func (m *MockRedisInterface) FlushDB() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushDB")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FlushDB indicates an expected call of FlushDB.
func (mr *MockRedisInterfaceMockRecorder) FlushDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDB", reflect.TypeOf((*MockRedisInterface)(nil).FlushDB))
}

// FlushDBAsync mocks base method.
func (m *MockRedisInterface) FlushDBAsync() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushDBAsync")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// FlushDBAsync indicates an expected call of FlushDBAsync.
func (mr *MockRedisInterfaceMockRecorder) FlushDBAsync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDBAsync", reflect.TypeOf((*MockRedisInterface)(nil).FlushDBAsync))
}

// GeoAdd mocks base method.
func (m *MockRedisInterface) GeoAdd(key string, geoLocation ...*redis.GeoLocation) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range geoLocation {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoAdd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// GeoAdd indicates an expected call of GeoAdd.
func (mr *MockRedisInterfaceMockRecorder) GeoAdd(key interface{}, geoLocation ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, geoLocation...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoAdd", reflect.TypeOf((*MockRedisInterface)(nil).GeoAdd), varargs...)
}

// GeoDist mocks base method.
func (m *MockRedisInterface) GeoDist(key, member1, member2, unit string) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoDist", key, member1, member2, unit)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// GeoDist indicates an expected call of GeoDist.
func (mr *MockRedisInterfaceMockRecorder) GeoDist(key, member1, member2, unit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoDist", reflect.TypeOf((*MockRedisInterface)(nil).GeoDist), key, member1, member2, unit)
}

// GeoHash mocks base method.
func (m *MockRedisInterface) GeoHash(key string, members ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoHash", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// GeoHash indicates an expected call of GeoHash.
func (mr *MockRedisInterfaceMockRecorder) GeoHash(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoHash", reflect.TypeOf((*MockRedisInterface)(nil).GeoHash), varargs...)
}

// GeoPos mocks base method.
func (m *MockRedisInterface) GeoPos(key string, members ...string) *redis.GeoPosCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GeoPos", varargs...)
	ret0, _ := ret[0].(*redis.GeoPosCmd)
	return ret0
}

// GeoPos indicates an expected call of GeoPos.
func (mr *MockRedisInterfaceMockRecorder) GeoPos(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoPos", reflect.TypeOf((*MockRedisInterface)(nil).GeoPos), varargs...)
}

// GeoRadius mocks base method.
func (m *MockRedisInterface) GeoRadius(key string, longitude, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadius", key, longitude, latitude, query)
	ret0, _ := ret[0].(*redis.GeoLocationCmd)
	return ret0
}

// GeoRadius indicates an expected call of GeoRadius.
func (mr *MockRedisInterfaceMockRecorder) GeoRadius(key, longitude, latitude, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadius", reflect.TypeOf((*MockRedisInterface)(nil).GeoRadius), key, longitude, latitude, query)
}

// GeoRadiusByMember mocks base method.
func (m *MockRedisInterface) GeoRadiusByMember(key, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadiusByMember", key, member, query)
	ret0, _ := ret[0].(*redis.GeoLocationCmd)
	return ret0
}

// GeoRadiusByMember indicates an expected call of GeoRadiusByMember.
func (mr *MockRedisInterfaceMockRecorder) GeoRadiusByMember(key, member, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadiusByMember", reflect.TypeOf((*MockRedisInterface)(nil).GeoRadiusByMember), key, member, query)
}

// GeoRadiusByMemberRO mocks base method.
func (m *MockRedisInterface) GeoRadiusByMemberRO(key, member string, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadiusByMemberRO", key, member, query)
	ret0, _ := ret[0].(*redis.GeoLocationCmd)
	return ret0
}

// GeoRadiusByMemberRO indicates an expected call of GeoRadiusByMemberRO.
func (mr *MockRedisInterfaceMockRecorder) GeoRadiusByMemberRO(key, member, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadiusByMemberRO", reflect.TypeOf((*MockRedisInterface)(nil).GeoRadiusByMemberRO), key, member, query)
}

// GeoRadiusRO mocks base method.
func (m *MockRedisInterface) GeoRadiusRO(key string, longitude, latitude float64, query *redis.GeoRadiusQuery) *redis.GeoLocationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeoRadiusRO", key, longitude, latitude, query)
	ret0, _ := ret[0].(*redis.GeoLocationCmd)
	return ret0
}

// GeoRadiusRO indicates an expected call of GeoRadiusRO.
func (mr *MockRedisInterfaceMockRecorder) GeoRadiusRO(key, longitude, latitude, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeoRadiusRO", reflect.TypeOf((*MockRedisInterface)(nil).GeoRadiusRO), key, longitude, latitude, query)
}

// Get mocks base method.
func (m *MockRedisInterface) Get(key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRedisInterfaceMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisInterface)(nil).Get), key)
}

// GetBit mocks base method.
func (m *MockRedisInterface) GetBit(key string, offset int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBit", key, offset)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// GetBit indicates an expected call of GetBit.
func (mr *MockRedisInterfaceMockRecorder) GetBit(key, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBit", reflect.TypeOf((*MockRedisInterface)(nil).GetBit), key, offset)
}

// GetRange mocks base method.
func (m *MockRedisInterface) GetRange(key string, start, end int64) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRange", key, start, end)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// GetRange indicates an expected call of GetRange.
func (mr *MockRedisInterfaceMockRecorder) GetRange(key, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRange", reflect.TypeOf((*MockRedisInterface)(nil).GetRange), key, start, end)
}

// GetSet mocks base method.
func (m *MockRedisInterface) GetSet(key string, value interface{}) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSet", key, value)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// GetSet indicates an expected call of GetSet.
func (mr *MockRedisInterfaceMockRecorder) GetSet(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSet", reflect.TypeOf((*MockRedisInterface)(nil).GetSet), key, value)
}

// HDel mocks base method.
func (m *MockRedisInterface) HDel(key string, fields ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HDel", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HDel indicates an expected call of HDel.
func (mr *MockRedisInterfaceMockRecorder) HDel(key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HDel", reflect.TypeOf((*MockRedisInterface)(nil).HDel), varargs...)
}

// HExists mocks base method.
func (m *MockRedisInterface) HExists(key, field string) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HExists", key, field)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// HExists indicates an expected call of HExists.
func (mr *MockRedisInterfaceMockRecorder) HExists(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HExists", reflect.TypeOf((*MockRedisInterface)(nil).HExists), key, field)
}

// HGet mocks base method.
func (m *MockRedisInterface) HGet(key, field string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGet", key, field)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// HGet indicates an expected call of HGet.
func (mr *MockRedisInterfaceMockRecorder) HGet(key, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGet", reflect.TypeOf((*MockRedisInterface)(nil).HGet), key, field)
}

// HGetAll mocks base method.
func (m *MockRedisInterface) HGetAll(key string) *redis.StringStringMapCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetAll", key)
	ret0, _ := ret[0].(*redis.StringStringMapCmd)
	return ret0
}

// HGetAll indicates an expected call of HGetAll.
func (mr *MockRedisInterfaceMockRecorder) HGetAll(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*MockRedisInterface)(nil).HGetAll), key)
}

// HIncrBy mocks base method.
func (m *MockRedisInterface) HIncrBy(key, field string, incr int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HIncrBy", key, field, incr)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HIncrBy indicates an expected call of HIncrBy.
func (mr *MockRedisInterfaceMockRecorder) HIncrBy(key, field, incr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HIncrBy", reflect.TypeOf((*MockRedisInterface)(nil).HIncrBy), key, field, incr)
}

// HIncrByFloat mocks base method.
func (m *MockRedisInterface) HIncrByFloat(key, field string, incr float64) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HIncrByFloat", key, field, incr)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// HIncrByFloat indicates an expected call of HIncrByFloat.
func (mr *MockRedisInterfaceMockRecorder) HIncrByFloat(key, field, incr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HIncrByFloat", reflect.TypeOf((*MockRedisInterface)(nil).HIncrByFloat), key, field, incr)
}

// HKeys mocks base method.
func (m *MockRedisInterface) HKeys(key string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HKeys", key)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// HKeys indicates an expected call of HKeys.
func (mr *MockRedisInterfaceMockRecorder) HKeys(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HKeys", reflect.TypeOf((*MockRedisInterface)(nil).HKeys), key)
}

// HLen mocks base method.
func (m *MockRedisInterface) HLen(key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HLen", key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// HLen indicates an expected call of HLen.
func (mr *MockRedisInterfaceMockRecorder) HLen(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HLen", reflect.TypeOf((*MockRedisInterface)(nil).HLen), key)
}

// HMGet mocks base method.
func (m *MockRedisInterface) HMGet(key string, fields ...string) *redis.SliceCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HMGet", varargs...)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

// HMGet indicates an expected call of HMGet.
func (mr *MockRedisInterfaceMockRecorder) HMGet(key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMGet", reflect.TypeOf((*MockRedisInterface)(nil).HMGet), varargs...)
}

// HMSet mocks base method.
func (m *MockRedisInterface) HMSet(key string, fields map[string]interface{}) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HMSet", key, fields)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// HMSet indicates an expected call of HMSet.
func (mr *MockRedisInterfaceMockRecorder) HMSet(key, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSet", reflect.TypeOf((*MockRedisInterface)(nil).HMSet), key, fields)
}

// HScan mocks base method.
func (m *MockRedisInterface) HScan(key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HScan", key, cursor, match, count)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

// HScan indicates an expected call of HScan.
func (mr *MockRedisInterfaceMockRecorder) HScan(key, cursor, match, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HScan", reflect.TypeOf((*MockRedisInterface)(nil).HScan), key, cursor, match, count)
}

// HSet mocks base method.
func (m *MockRedisInterface) HSet(key, field string, value interface{}) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSet", key, field, value)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// HSet indicates an expected call of HSet.
func (mr *MockRedisInterfaceMockRecorder) HSet(key, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSet", reflect.TypeOf((*MockRedisInterface)(nil).HSet), key, field, value)
}

// HSetNX mocks base method.
func (m *MockRedisInterface) HSetNX(key, field string, value interface{}) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSetNX", key, field, value)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// HSetNX indicates an expected call of HSetNX.
func (mr *MockRedisInterfaceMockRecorder) HSetNX(key, field, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSetNX", reflect.TypeOf((*MockRedisInterface)(nil).HSetNX), key, field, value)
}

// HVals mocks base method.
func (m *MockRedisInterface) HVals(key string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HVals", key)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// HVals indicates an expected call of HVals.
func (mr *MockRedisInterfaceMockRecorder) HVals(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HVals", reflect.TypeOf((*MockRedisInterface)(nil).HVals), key)
}

// Incr mocks base method.
func (m *MockRedisInterface) Incr(key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockRedisInterfaceMockRecorder) Incr(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockRedisInterface)(nil).Incr), key)
}

// IncrBy mocks base method.
func (m *MockRedisInterface) IncrBy(key string, value int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrBy", key, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// IncrBy indicates an expected call of IncrBy.
func (mr *MockRedisInterfaceMockRecorder) IncrBy(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrBy", reflect.TypeOf((*MockRedisInterface)(nil).IncrBy), key, value)
}

// IncrByFloat mocks base method.
func (m *MockRedisInterface) IncrByFloat(key string, value float64) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrByFloat", key, value)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// IncrByFloat indicates an expected call of IncrByFloat.
func (mr *MockRedisInterfaceMockRecorder) IncrByFloat(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrByFloat", reflect.TypeOf((*MockRedisInterface)(nil).IncrByFloat), key, value)
}

// Info mocks base method.
func (m *MockRedisInterface) Info(section ...string) *redis.StringCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range section {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockRedisInterfaceMockRecorder) Info(section ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockRedisInterface)(nil).Info), section...)
}

// Keys mocks base method.
func (m *MockRedisInterface) Keys(pattern string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keys", pattern)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// Keys indicates an expected call of Keys.
func (mr *MockRedisInterfaceMockRecorder) Keys(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keys", reflect.TypeOf((*MockRedisInterface)(nil).Keys), pattern)
}

// LIndex mocks base method.
func (m *MockRedisInterface) LIndex(key string, index int64) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LIndex", key, index)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// LIndex indicates an expected call of LIndex.
func (mr *MockRedisInterfaceMockRecorder) LIndex(key, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LIndex", reflect.TypeOf((*MockRedisInterface)(nil).LIndex), key, index)
}

// LInsert mocks base method.
func (m *MockRedisInterface) LInsert(key, op string, pivot, value interface{}) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LInsert", key, op, pivot, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LInsert indicates an expected call of LInsert.
func (mr *MockRedisInterfaceMockRecorder) LInsert(key, op, pivot, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LInsert", reflect.TypeOf((*MockRedisInterface)(nil).LInsert), key, op, pivot, value)
}

// LInsertAfter mocks base method.
func (m *MockRedisInterface) LInsertAfter(key string, pivot, value interface{}) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LInsertAfter", key, pivot, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LInsertAfter indicates an expected call of LInsertAfter.
func (mr *MockRedisInterfaceMockRecorder) LInsertAfter(key, pivot, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LInsertAfter", reflect.TypeOf((*MockRedisInterface)(nil).LInsertAfter), key, pivot, value)
}

// LInsertBefore mocks base method.
func (m *MockRedisInterface) LInsertBefore(key string, pivot, value interface{}) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LInsertBefore", key, pivot, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LInsertBefore indicates an expected call of LInsertBefore.
func (mr *MockRedisInterfaceMockRecorder) LInsertBefore(key, pivot, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LInsertBefore", reflect.TypeOf((*MockRedisInterface)(nil).LInsertBefore), key, pivot, value)
}

// LLen mocks base method.
func (m *MockRedisInterface) LLen(key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LLen", key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LLen indicates an expected call of LLen.
func (mr *MockRedisInterfaceMockRecorder) LLen(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LLen", reflect.TypeOf((*MockRedisInterface)(nil).LLen), key)
}

// LPop mocks base method.
func (m *MockRedisInterface) LPop(key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPop", key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// LPop indicates an expected call of LPop.
func (mr *MockRedisInterfaceMockRecorder) LPop(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPop", reflect.TypeOf((*MockRedisInterface)(nil).LPop), key)
}

// LPush mocks base method.
func (m *MockRedisInterface) LPush(key string, values ...interface{}) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LPush", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LPush indicates an expected call of LPush.
func (mr *MockRedisInterfaceMockRecorder) LPush(key interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPush", reflect.TypeOf((*MockRedisInterface)(nil).LPush), varargs...)
}

// LPushX mocks base method.
func (m *MockRedisInterface) LPushX(key string, value interface{}) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPushX", key, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LPushX indicates an expected call of LPushX.
func (mr *MockRedisInterfaceMockRecorder) LPushX(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPushX", reflect.TypeOf((*MockRedisInterface)(nil).LPushX), key, value)
}

// LRange mocks base method.
func (m *MockRedisInterface) LRange(key string, start, stop int64) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRange", key, start, stop)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// LRange indicates an expected call of LRange.
func (mr *MockRedisInterfaceMockRecorder) LRange(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRange", reflect.TypeOf((*MockRedisInterface)(nil).LRange), key, start, stop)
}

// LRem mocks base method.
func (m *MockRedisInterface) LRem(key string, count int64, value interface{}) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRem", key, count, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LRem indicates an expected call of LRem.
func (mr *MockRedisInterfaceMockRecorder) LRem(key, count, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRem", reflect.TypeOf((*MockRedisInterface)(nil).LRem), key, count, value)
}

// LSet mocks base method.
func (m *MockRedisInterface) LSet(key string, index int64, value interface{}) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LSet", key, index, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// LSet indicates an expected call of LSet.
func (mr *MockRedisInterfaceMockRecorder) LSet(key, index, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LSet", reflect.TypeOf((*MockRedisInterface)(nil).LSet), key, index, value)
}

// LTrim mocks base method.
func (m *MockRedisInterface) LTrim(key string, start, stop int64) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LTrim", key, start, stop)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// LTrim indicates an expected call of LTrim.
func (mr *MockRedisInterfaceMockRecorder) LTrim(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LTrim", reflect.TypeOf((*MockRedisInterface)(nil).LTrim), key, start, stop)
}

// LastSave mocks base method.
func (m *MockRedisInterface) LastSave() *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastSave")
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// LastSave indicates an expected call of LastSave.
func (mr *MockRedisInterfaceMockRecorder) LastSave() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastSave", reflect.TypeOf((*MockRedisInterface)(nil).LastSave))
}

// MGet mocks base method.
func (m *MockRedisInterface) MGet(keys ...string) *redis.SliceCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGet", varargs...)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

// MGet indicates an expected call of MGet.
func (mr *MockRedisInterfaceMockRecorder) MGet(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockRedisInterface)(nil).MGet), keys...)
}

// MSet mocks base method.
func (m *MockRedisInterface) MSet(pairs ...interface{}) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range pairs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MSet", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// MSet indicates an expected call of MSet.
func (mr *MockRedisInterfaceMockRecorder) MSet(pairs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSet", reflect.TypeOf((*MockRedisInterface)(nil).MSet), pairs...)
}

// MSetNX mocks base method.
func (m *MockRedisInterface) MSetNX(pairs ...interface{}) *redis.BoolCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range pairs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MSetNX", varargs...)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// MSetNX indicates an expected call of MSetNX.
func (mr *MockRedisInterfaceMockRecorder) MSetNX(pairs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSetNX", reflect.TypeOf((*MockRedisInterface)(nil).MSetNX), pairs...)
}

// MemoryUsage mocks base method.
func (m *MockRedisInterface) MemoryUsage(key string, samples ...int) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range samples {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MemoryUsage", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// MemoryUsage indicates an expected call of MemoryUsage.
func (mr *MockRedisInterfaceMockRecorder) MemoryUsage(key interface{}, samples ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, samples...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemoryUsage", reflect.TypeOf((*MockRedisInterface)(nil).MemoryUsage), varargs...)
}

// Migrate mocks base method.
func (m *MockRedisInterface) Migrate(host, port, key string, db int64, timeout time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", host, port, key, db, timeout)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockRedisInterfaceMockRecorder) Migrate(host, port, key, db, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockRedisInterface)(nil).Migrate), host, port, key, db, timeout)
}

// Move mocks base method.
func (m *MockRedisInterface) Move(key string, db int64) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", key, db)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// Move indicates an expected call of Move.
func (mr *MockRedisInterfaceMockRecorder) Move(key, db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockRedisInterface)(nil).Move), key, db)
}

// ObjectEncoding mocks base method.
func (m *MockRedisInterface) ObjectEncoding(key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectEncoding", key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ObjectEncoding indicates an expected call of ObjectEncoding.
func (mr *MockRedisInterfaceMockRecorder) ObjectEncoding(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectEncoding", reflect.TypeOf((*MockRedisInterface)(nil).ObjectEncoding), key)
}

// ObjectIdleTime mocks base method.
func (m *MockRedisInterface) ObjectIdleTime(key string) *redis.DurationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectIdleTime", key)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

// ObjectIdleTime indicates an expected call of ObjectIdleTime.
func (mr *MockRedisInterfaceMockRecorder) ObjectIdleTime(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectIdleTime", reflect.TypeOf((*MockRedisInterface)(nil).ObjectIdleTime), key)
}

// ObjectRefCount mocks base method.
func (m *MockRedisInterface) ObjectRefCount(key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectRefCount", key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ObjectRefCount indicates an expected call of ObjectRefCount.
func (mr *MockRedisInterfaceMockRecorder) ObjectRefCount(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectRefCount", reflect.TypeOf((*MockRedisInterface)(nil).ObjectRefCount), key)
}

// PExpire mocks base method.
func (m *MockRedisInterface) PExpire(key string, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PExpire", key, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// PExpire indicates an expected call of PExpire.
func (mr *MockRedisInterfaceMockRecorder) PExpire(key, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PExpire", reflect.TypeOf((*MockRedisInterface)(nil).PExpire), key, expiration)
}

// PExpireAt mocks base method.
func (m *MockRedisInterface) PExpireAt(key string, tm time.Time) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PExpireAt", key, tm)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// PExpireAt indicates an expected call of PExpireAt.
func (mr *MockRedisInterfaceMockRecorder) PExpireAt(key, tm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PExpireAt", reflect.TypeOf((*MockRedisInterface)(nil).PExpireAt), key, tm)
}

// PFAdd mocks base method.
func (m *MockRedisInterface) PFAdd(key string, els ...interface{}) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range els {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PFAdd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// PFAdd indicates an expected call of PFAdd.
func (mr *MockRedisInterfaceMockRecorder) PFAdd(key interface{}, els ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, els...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PFAdd", reflect.TypeOf((*MockRedisInterface)(nil).PFAdd), varargs...)
}

// PFCount mocks base method.
func (m *MockRedisInterface) PFCount(keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PFCount", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// PFCount indicates an expected call of PFCount.
func (mr *MockRedisInterfaceMockRecorder) PFCount(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PFCount", reflect.TypeOf((*MockRedisInterface)(nil).PFCount), keys...)
}

// PFMerge mocks base method.
func (m *MockRedisInterface) PFMerge(dest string, keys ...string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PFMerge", varargs...)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// PFMerge indicates an expected call of PFMerge.
func (mr *MockRedisInterfaceMockRecorder) PFMerge(dest interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PFMerge", reflect.TypeOf((*MockRedisInterface)(nil).PFMerge), varargs...)
}

// PSubscribe mocks base method.
func (m *MockRedisInterface) PSubscribe(channels ...string) *redis.PubSub {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PSubscribe", varargs...)
	ret0, _ := ret[0].(*redis.PubSub)
	return ret0
}

// PSubscribe indicates an expected call of PSubscribe.
func (mr *MockRedisInterfaceMockRecorder) PSubscribe(channels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PSubscribe", reflect.TypeOf((*MockRedisInterface)(nil).PSubscribe), channels...)
}

// PTTL mocks base method.
func (m *MockRedisInterface) PTTL(key string) *redis.DurationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PTTL", key)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

// PTTL indicates an expected call of PTTL.
func (mr *MockRedisInterfaceMockRecorder) PTTL(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PTTL", reflect.TypeOf((*MockRedisInterface)(nil).PTTL), key)
}

// Persist mocks base method.
func (m *MockRedisInterface) Persist(key string) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", key)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// Persist indicates an expected call of Persist.
func (mr *MockRedisInterfaceMockRecorder) Persist(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockRedisInterface)(nil).Persist), key)
}

// Ping mocks base method.
func (m *MockRedisInterface) Ping() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRedisInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRedisInterface)(nil).Ping))
}

// Pipeline mocks base method.
func (m *MockRedisInterface) Pipeline() redis.Pipeliner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipeline")
	ret0, _ := ret[0].(redis.Pipeliner)
	return ret0
}

// Pipeline indicates an expected call of Pipeline.
func (mr *MockRedisInterfaceMockRecorder) Pipeline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipeline", reflect.TypeOf((*MockRedisInterface)(nil).Pipeline))
}

// Pipelined mocks base method.
func (m *MockRedisInterface) Pipelined(fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipelined", fn)
	ret0, _ := ret[0].([]redis.Cmder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pipelined indicates an expected call of Pipelined.
func (mr *MockRedisInterfaceMockRecorder) Pipelined(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipelined", reflect.TypeOf((*MockRedisInterface)(nil).Pipelined), fn)
}

// Process mocks base method.
func (m *MockRedisInterface) Process(cmd redis.Cmder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockRedisInterfaceMockRecorder) Process(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockRedisInterface)(nil).Process), cmd)
}

// PubSubChannels mocks base method.
func (m *MockRedisInterface) PubSubChannels(pattern string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSubChannels", pattern)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// PubSubChannels indicates an expected call of PubSubChannels.
func (mr *MockRedisInterfaceMockRecorder) PubSubChannels(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubChannels", reflect.TypeOf((*MockRedisInterface)(nil).PubSubChannels), pattern)
}

// PubSubNumPat mocks base method.
func (m *MockRedisInterface) PubSubNumPat() *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSubNumPat")
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// PubSubNumPat indicates an expected call of PubSubNumPat.
func (mr *MockRedisInterfaceMockRecorder) PubSubNumPat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubNumPat", reflect.TypeOf((*MockRedisInterface)(nil).PubSubNumPat))
}

// PubSubNumSub mocks base method.
func (m *MockRedisInterface) PubSubNumSub(channels ...string) *redis.StringIntMapCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PubSubNumSub", varargs...)
	ret0, _ := ret[0].(*redis.StringIntMapCmd)
	return ret0
}

// PubSubNumSub indicates an expected call of PubSubNumSub.
func (mr *MockRedisInterfaceMockRecorder) PubSubNumSub(channels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubNumSub", reflect.TypeOf((*MockRedisInterface)(nil).PubSubNumSub), channels...)
}

// Publish mocks base method.
func (m *MockRedisInterface) Publish(channel string, message interface{}) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", channel, message)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockRedisInterfaceMockRecorder) Publish(channel, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockRedisInterface)(nil).Publish), channel, message)
}

// Quit mocks base method.
func (m *MockRedisInterface) Quit() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quit")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Quit indicates an expected call of Quit.
func (mr *MockRedisInterfaceMockRecorder) Quit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quit", reflect.TypeOf((*MockRedisInterface)(nil).Quit))
}

// RPop mocks base method.
func (m *MockRedisInterface) RPop(key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPop", key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// RPop indicates an expected call of RPop.
func (mr *MockRedisInterfaceMockRecorder) RPop(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPop", reflect.TypeOf((*MockRedisInterface)(nil).RPop), key)
}

// RPopLPush mocks base method.
func (m *MockRedisInterface) RPopLPush(source, destination string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPopLPush", source, destination)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// RPopLPush indicates an expected call of RPopLPush.
func (mr *MockRedisInterfaceMockRecorder) RPopLPush(source, destination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPopLPush", reflect.TypeOf((*MockRedisInterface)(nil).RPopLPush), source, destination)
}

// RPush mocks base method.
func (m *MockRedisInterface) RPush(key string, values ...interface{}) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RPush", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// RPush indicates an expected call of RPush.
func (mr *MockRedisInterfaceMockRecorder) RPush(key interface{}, values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPush", reflect.TypeOf((*MockRedisInterface)(nil).RPush), varargs...)
}

// RPushX mocks base method.
func (m *MockRedisInterface) RPushX(key string, value interface{}) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPushX", key, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// RPushX indicates an expected call of RPushX.
func (mr *MockRedisInterfaceMockRecorder) RPushX(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPushX", reflect.TypeOf((*MockRedisInterface)(nil).RPushX), key, value)
}

// RandomKey mocks base method.
func (m *MockRedisInterface) RandomKey() *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RandomKey")
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// RandomKey indicates an expected call of RandomKey.
func (mr *MockRedisInterfaceMockRecorder) RandomKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RandomKey", reflect.TypeOf((*MockRedisInterface)(nil).RandomKey))
}

// ReadOnly mocks base method.
func (m *MockRedisInterface) ReadOnly() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOnly")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ReadOnly indicates an expected call of ReadOnly.
func (mr *MockRedisInterfaceMockRecorder) ReadOnly() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOnly", reflect.TypeOf((*MockRedisInterface)(nil).ReadOnly))
}

// ReadWrite mocks base method.
func (m *MockRedisInterface) ReadWrite() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWrite")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ReadWrite indicates an expected call of ReadWrite.
func (mr *MockRedisInterfaceMockRecorder) ReadWrite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWrite", reflect.TypeOf((*MockRedisInterface)(nil).ReadWrite))
}

// Rename mocks base method.
func (m *MockRedisInterface) Rename(key, newkey string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", key, newkey)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockRedisInterfaceMockRecorder) Rename(key, newkey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockRedisInterface)(nil).Rename), key, newkey)
}

// RenameNX mocks base method.
func (m *MockRedisInterface) RenameNX(key, newkey string) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameNX", key, newkey)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// RenameNX indicates an expected call of RenameNX.
func (mr *MockRedisInterfaceMockRecorder) RenameNX(key, newkey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameNX", reflect.TypeOf((*MockRedisInterface)(nil).RenameNX), key, newkey)
}

// Restore mocks base method.
func (m *MockRedisInterface) Restore(key string, ttl time.Duration, value string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", key, ttl, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockRedisInterfaceMockRecorder) Restore(key, ttl, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockRedisInterface)(nil).Restore), key, ttl, value)
}

// RestoreReplace mocks base method.
func (m *MockRedisInterface) RestoreReplace(key string, ttl time.Duration, value string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreReplace", key, ttl, value)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// RestoreReplace indicates an expected call of RestoreReplace.
func (mr *MockRedisInterfaceMockRecorder) RestoreReplace(key, ttl, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreReplace", reflect.TypeOf((*MockRedisInterface)(nil).RestoreReplace), key, ttl, value)
}

// SAdd mocks base method.
func (m *MockRedisInterface) SAdd(key string, members ...interface{}) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SAdd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SAdd indicates an expected call of SAdd.
func (mr *MockRedisInterfaceMockRecorder) SAdd(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SAdd", reflect.TypeOf((*MockRedisInterface)(nil).SAdd), varargs...)
}

// SCard mocks base method.
func (m *MockRedisInterface) SCard(key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCard", key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SCard indicates an expected call of SCard.
func (mr *MockRedisInterfaceMockRecorder) SCard(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCard", reflect.TypeOf((*MockRedisInterface)(nil).SCard), key)
}

// SDiff mocks base method.
func (m *MockRedisInterface) SDiff(keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SDiff", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SDiff indicates an expected call of SDiff.
func (mr *MockRedisInterfaceMockRecorder) SDiff(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDiff", reflect.TypeOf((*MockRedisInterface)(nil).SDiff), keys...)
}

// SDiffStore mocks base method.
func (m *MockRedisInterface) SDiffStore(destination string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SDiffStore", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SDiffStore indicates an expected call of SDiffStore.
func (mr *MockRedisInterfaceMockRecorder) SDiffStore(destination interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SDiffStore", reflect.TypeOf((*MockRedisInterface)(nil).SDiffStore), varargs...)
}

// SInter mocks base method.
func (m *MockRedisInterface) SInter(keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SInter", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SInter indicates an expected call of SInter.
func (mr *MockRedisInterfaceMockRecorder) SInter(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SInter", reflect.TypeOf((*MockRedisInterface)(nil).SInter), keys...)
}

// SInterStore mocks base method.
func (m *MockRedisInterface) SInterStore(destination string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SInterStore", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SInterStore indicates an expected call of SInterStore.
func (mr *MockRedisInterfaceMockRecorder) SInterStore(destination interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SInterStore", reflect.TypeOf((*MockRedisInterface)(nil).SInterStore), varargs...)
}

// SIsMember mocks base method.
func (m *MockRedisInterface) SIsMember(key string, member interface{}) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SIsMember", key, member)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// SIsMember indicates an expected call of SIsMember.
func (mr *MockRedisInterfaceMockRecorder) SIsMember(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SIsMember", reflect.TypeOf((*MockRedisInterface)(nil).SIsMember), key, member)
}

// SMembers mocks base method.
func (m *MockRedisInterface) SMembers(key string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembers", key)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SMembers indicates an expected call of SMembers.
func (mr *MockRedisInterfaceMockRecorder) SMembers(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembers", reflect.TypeOf((*MockRedisInterface)(nil).SMembers), key)
}

// SMembersMap mocks base method.
func (m *MockRedisInterface) SMembersMap(key string) *redis.StringStructMapCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMembersMap", key)
	ret0, _ := ret[0].(*redis.StringStructMapCmd)
	return ret0
}

// SMembersMap indicates an expected call of SMembersMap.
func (mr *MockRedisInterfaceMockRecorder) SMembersMap(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMembersMap", reflect.TypeOf((*MockRedisInterface)(nil).SMembersMap), key)
}

// SMove mocks base method.
func (m *MockRedisInterface) SMove(source, destination string, member interface{}) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMove", source, destination, member)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// SMove indicates an expected call of SMove.
func (mr *MockRedisInterfaceMockRecorder) SMove(source, destination, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMove", reflect.TypeOf((*MockRedisInterface)(nil).SMove), source, destination, member)
}

// SPop mocks base method.
func (m *MockRedisInterface) SPop(key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SPop", key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// SPop indicates an expected call of SPop.
func (mr *MockRedisInterfaceMockRecorder) SPop(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPop", reflect.TypeOf((*MockRedisInterface)(nil).SPop), key)
}

// SPopN mocks base method.
func (m *MockRedisInterface) SPopN(key string, count int64) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SPopN", key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SPopN indicates an expected call of SPopN.
func (mr *MockRedisInterfaceMockRecorder) SPopN(key, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPopN", reflect.TypeOf((*MockRedisInterface)(nil).SPopN), key, count)
}

// SRandMember mocks base method.
func (m *MockRedisInterface) SRandMember(key string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SRandMember", key)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// SRandMember indicates an expected call of SRandMember.
func (mr *MockRedisInterfaceMockRecorder) SRandMember(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRandMember", reflect.TypeOf((*MockRedisInterface)(nil).SRandMember), key)
}

// SRandMemberN mocks base method.
func (m *MockRedisInterface) SRandMemberN(key string, count int64) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SRandMemberN", key, count)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SRandMemberN indicates an expected call of SRandMemberN.
func (mr *MockRedisInterfaceMockRecorder) SRandMemberN(key, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRandMemberN", reflect.TypeOf((*MockRedisInterface)(nil).SRandMemberN), key, count)
}

// SRem mocks base method.
func (m *MockRedisInterface) SRem(key string, members ...interface{}) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SRem", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SRem indicates an expected call of SRem.
func (mr *MockRedisInterfaceMockRecorder) SRem(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SRem", reflect.TypeOf((*MockRedisInterface)(nil).SRem), varargs...)
}

// SScan mocks base method.
func (m *MockRedisInterface) SScan(key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SScan", key, cursor, match, count)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

// SScan indicates an expected call of SScan.
func (mr *MockRedisInterfaceMockRecorder) SScan(key, cursor, match, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SScan", reflect.TypeOf((*MockRedisInterface)(nil).SScan), key, cursor, match, count)
}

// SUnion mocks base method.
func (m *MockRedisInterface) SUnion(keys ...string) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SUnion", varargs...)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// SUnion indicates an expected call of SUnion.
func (mr *MockRedisInterfaceMockRecorder) SUnion(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SUnion", reflect.TypeOf((*MockRedisInterface)(nil).SUnion), keys...)
}

// SUnionStore mocks base method.
func (m *MockRedisInterface) SUnionStore(destination string, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{destination}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SUnionStore", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SUnionStore indicates an expected call of SUnionStore.
func (mr *MockRedisInterfaceMockRecorder) SUnionStore(destination interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destination}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SUnionStore", reflect.TypeOf((*MockRedisInterface)(nil).SUnionStore), varargs...)
}

// Save mocks base method.
func (m *MockRedisInterface) Save() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRedisInterfaceMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRedisInterface)(nil).Save))
}

// Scan mocks base method.
func (m *MockRedisInterface) Scan(cursor uint64, match string, count int64) *redis.ScanCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", cursor, match, count)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRedisInterfaceMockRecorder) Scan(cursor, match, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRedisInterface)(nil).Scan), cursor, match, count)
}

// ScriptExists mocks base method.
func (m *MockRedisInterface) ScriptExists(hashes ...string) *redis.BoolSliceCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range hashes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScriptExists", varargs...)
	ret0, _ := ret[0].(*redis.BoolSliceCmd)
	return ret0
}

// ScriptExists indicates an expected call of ScriptExists.
func (mr *MockRedisInterfaceMockRecorder) ScriptExists(hashes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptExists", reflect.TypeOf((*MockRedisInterface)(nil).ScriptExists), hashes...)
}

// ScriptFlush mocks base method.
func (m *MockRedisInterface) ScriptFlush() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScriptFlush")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ScriptFlush indicates an expected call of ScriptFlush.
func (mr *MockRedisInterfaceMockRecorder) ScriptFlush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptFlush", reflect.TypeOf((*MockRedisInterface)(nil).ScriptFlush))
}

// ScriptKill mocks base method.
func (m *MockRedisInterface) ScriptKill() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScriptKill")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ScriptKill indicates an expected call of ScriptKill.
func (mr *MockRedisInterfaceMockRecorder) ScriptKill() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptKill", reflect.TypeOf((*MockRedisInterface)(nil).ScriptKill))
}

// ScriptLoad mocks base method.
func (m *MockRedisInterface) ScriptLoad(script string) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScriptLoad", script)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// ScriptLoad indicates an expected call of ScriptLoad.
func (mr *MockRedisInterfaceMockRecorder) ScriptLoad(script interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScriptLoad", reflect.TypeOf((*MockRedisInterface)(nil).ScriptLoad), script)
}

// Set mocks base method.
func (m *MockRedisInterface) Set(key string, value interface{}, expiration time.Duration) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, expiration)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisInterfaceMockRecorder) Set(key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisInterface)(nil).Set), key, value, expiration)
}

// SetBit mocks base method.
func (m *MockRedisInterface) SetBit(key string, offset int64, value int) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBit", key, offset, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SetBit indicates an expected call of SetBit.
func (mr *MockRedisInterfaceMockRecorder) SetBit(key, offset, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBit", reflect.TypeOf((*MockRedisInterface)(nil).SetBit), key, offset, value)
}

// SetNX mocks base method.
func (m *MockRedisInterface) SetNX(key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNX", key, value, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// SetNX indicates an expected call of SetNX.
func (mr *MockRedisInterfaceMockRecorder) SetNX(key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNX", reflect.TypeOf((*MockRedisInterface)(nil).SetNX), key, value, expiration)
}

// SetRange mocks base method.
func (m *MockRedisInterface) SetRange(key string, offset int64, value string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRange", key, offset, value)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SetRange indicates an expected call of SetRange.
func (mr *MockRedisInterfaceMockRecorder) SetRange(key, offset, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRange", reflect.TypeOf((*MockRedisInterface)(nil).SetRange), key, offset, value)
}

// SetXX mocks base method.
func (m *MockRedisInterface) SetXX(key string, value interface{}, expiration time.Duration) *redis.BoolCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetXX", key, value, expiration)
	ret0, _ := ret[0].(*redis.BoolCmd)
	return ret0
}

// SetXX indicates an expected call of SetXX.
func (mr *MockRedisInterfaceMockRecorder) SetXX(key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetXX", reflect.TypeOf((*MockRedisInterface)(nil).SetXX), key, value, expiration)
}

// Shutdown mocks base method.
func (m *MockRedisInterface) Shutdown() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockRedisInterfaceMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockRedisInterface)(nil).Shutdown))
}

// ShutdownNoSave mocks base method.
func (m *MockRedisInterface) ShutdownNoSave() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownNoSave")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ShutdownNoSave indicates an expected call of ShutdownNoSave.
func (mr *MockRedisInterfaceMockRecorder) ShutdownNoSave() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownNoSave", reflect.TypeOf((*MockRedisInterface)(nil).ShutdownNoSave))
}

// ShutdownSave mocks base method.
func (m *MockRedisInterface) ShutdownSave() *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownSave")
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// ShutdownSave indicates an expected call of ShutdownSave.
func (mr *MockRedisInterfaceMockRecorder) ShutdownSave() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownSave", reflect.TypeOf((*MockRedisInterface)(nil).ShutdownSave))
}

// SlaveOf mocks base method.
func (m *MockRedisInterface) SlaveOf(host, port string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlaveOf", host, port)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// SlaveOf indicates an expected call of SlaveOf.
func (mr *MockRedisInterfaceMockRecorder) SlaveOf(host, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlaveOf", reflect.TypeOf((*MockRedisInterface)(nil).SlaveOf), host, port)
}

// Sort mocks base method.
func (m *MockRedisInterface) Sort(key string, sort *redis.Sort) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sort", key, sort)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// Sort indicates an expected call of Sort.
func (mr *MockRedisInterfaceMockRecorder) Sort(key, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sort", reflect.TypeOf((*MockRedisInterface)(nil).Sort), key, sort)
}

// SortInterfaces mocks base method.
func (m *MockRedisInterface) SortInterfaces(key string, sort *redis.Sort) *redis.SliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortInterfaces", key, sort)
	ret0, _ := ret[0].(*redis.SliceCmd)
	return ret0
}

// SortInterfaces indicates an expected call of SortInterfaces.
func (mr *MockRedisInterfaceMockRecorder) SortInterfaces(key, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortInterfaces", reflect.TypeOf((*MockRedisInterface)(nil).SortInterfaces), key, sort)
}

// SortStore mocks base method.
func (m *MockRedisInterface) SortStore(key, store string, sort *redis.Sort) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortStore", key, store, sort)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// SortStore indicates an expected call of SortStore.
func (mr *MockRedisInterfaceMockRecorder) SortStore(key, store, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortStore", reflect.TypeOf((*MockRedisInterface)(nil).SortStore), key, store, sort)
}

// StrLen mocks base method.
func (m *MockRedisInterface) StrLen(key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StrLen", key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// StrLen indicates an expected call of StrLen.
func (mr *MockRedisInterfaceMockRecorder) StrLen(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StrLen", reflect.TypeOf((*MockRedisInterface)(nil).StrLen), key)
}

// Subscribe mocks base method.
func (m *MockRedisInterface) Subscribe(channels ...string) *redis.PubSub {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(*redis.PubSub)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockRedisInterfaceMockRecorder) Subscribe(channels ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockRedisInterface)(nil).Subscribe), channels...)
}

// TTL mocks base method.
func (m *MockRedisInterface) TTL(key string) *redis.DurationCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TTL", key)
	ret0, _ := ret[0].(*redis.DurationCmd)
	return ret0
}

// TTL indicates an expected call of TTL.
func (mr *MockRedisInterfaceMockRecorder) TTL(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockRedisInterface)(nil).TTL), key)
}

// Time mocks base method.
func (m *MockRedisInterface) Time() *redis.TimeCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Time")
	ret0, _ := ret[0].(*redis.TimeCmd)
	return ret0
}

// Time indicates an expected call of Time.
func (mr *MockRedisInterfaceMockRecorder) Time() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockRedisInterface)(nil).Time))
}

// Touch mocks base method.
func (m *MockRedisInterface) Touch(keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Touch", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Touch indicates an expected call of Touch.
func (mr *MockRedisInterfaceMockRecorder) Touch(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Touch", reflect.TypeOf((*MockRedisInterface)(nil).Touch), keys...)
}

// TxPipeline mocks base method.
func (m *MockRedisInterface) TxPipeline() redis.Pipeliner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPipeline")
	ret0, _ := ret[0].(redis.Pipeliner)
	return ret0
}

// TxPipeline indicates an expected call of TxPipeline.
func (mr *MockRedisInterfaceMockRecorder) TxPipeline() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPipeline", reflect.TypeOf((*MockRedisInterface)(nil).TxPipeline))
}

// TxPipelined mocks base method.
func (m *MockRedisInterface) TxPipelined(fn func(redis.Pipeliner) error) ([]redis.Cmder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxPipelined", fn)
	ret0, _ := ret[0].([]redis.Cmder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxPipelined indicates an expected call of TxPipelined.
func (mr *MockRedisInterfaceMockRecorder) TxPipelined(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxPipelined", reflect.TypeOf((*MockRedisInterface)(nil).TxPipelined), fn)
}

// Type mocks base method.
func (m *MockRedisInterface) Type(key string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type", key)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockRedisInterfaceMockRecorder) Type(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockRedisInterface)(nil).Type), key)
}

// Unlink mocks base method.
func (m *MockRedisInterface) Unlink(keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unlink", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// Unlink indicates an expected call of Unlink.
func (mr *MockRedisInterfaceMockRecorder) Unlink(keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlink", reflect.TypeOf((*MockRedisInterface)(nil).Unlink), keys...)
}

// Watch mocks base method.
func (m *MockRedisInterface) Watch(fn func(*redis.Tx) error, keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{fn}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockRedisInterfaceMockRecorder) Watch(fn interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{fn}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockRedisInterface)(nil).Watch), varargs...)
}

// WrapProcess mocks base method.
func (m *MockRedisInterface) WrapProcess(fn func(func(redis.Cmder) error) func(redis.Cmder) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WrapProcess", fn)
}

// WrapProcess indicates an expected call of WrapProcess.
func (mr *MockRedisInterfaceMockRecorder) WrapProcess(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapProcess", reflect.TypeOf((*MockRedisInterface)(nil).WrapProcess), fn)
}

// WrapProcessPipeline mocks base method.
func (m *MockRedisInterface) WrapProcessPipeline(fn func(func([]redis.Cmder) error) func([]redis.Cmder) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WrapProcessPipeline", fn)
}

// WrapProcessPipeline indicates an expected call of WrapProcessPipeline.
func (mr *MockRedisInterfaceMockRecorder) WrapProcessPipeline(fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapProcessPipeline", reflect.TypeOf((*MockRedisInterface)(nil).WrapProcessPipeline), fn)
}

// XAck mocks base method.
func (m *MockRedisInterface) XAck(stream, group string, ids ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{stream, group}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XAck", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XAck indicates an expected call of XAck.
func (mr *MockRedisInterfaceMockRecorder) XAck(stream, group interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stream, group}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAck", reflect.TypeOf((*MockRedisInterface)(nil).XAck), varargs...)
}

// XAdd mocks base method.
func (m *MockRedisInterface) XAdd(a *redis.XAddArgs) *redis.StringCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XAdd", a)
	ret0, _ := ret[0].(*redis.StringCmd)
	return ret0
}

// XAdd indicates an expected call of XAdd.
func (mr *MockRedisInterfaceMockRecorder) XAdd(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAdd", reflect.TypeOf((*MockRedisInterface)(nil).XAdd), a)
}

// XClaim mocks base method.
func (m *MockRedisInterface) XClaim(a *redis.XClaimArgs) *redis.XMessageSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XClaim", a)
	ret0, _ := ret[0].(*redis.XMessageSliceCmd)
	return ret0
}

// XClaim indicates an expected call of XClaim.
func (mr *MockRedisInterfaceMockRecorder) XClaim(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XClaim", reflect.TypeOf((*MockRedisInterface)(nil).XClaim), a)
}

// XClaimJustID mocks base method.
func (m *MockRedisInterface) XClaimJustID(a *redis.XClaimArgs) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XClaimJustID", a)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// XClaimJustID indicates an expected call of XClaimJustID.
func (mr *MockRedisInterfaceMockRecorder) XClaimJustID(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XClaimJustID", reflect.TypeOf((*MockRedisInterface)(nil).XClaimJustID), a)
}

// XDel mocks base method.
func (m *MockRedisInterface) XDel(stream string, ids ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{stream}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XDel", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XDel indicates an expected call of XDel.
func (mr *MockRedisInterfaceMockRecorder) XDel(stream interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{stream}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XDel", reflect.TypeOf((*MockRedisInterface)(nil).XDel), varargs...)
}

// XGroupCreate mocks base method.
func (m *MockRedisInterface) XGroupCreate(stream, group, start string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupCreate", stream, group, start)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// XGroupCreate indicates an expected call of XGroupCreate.
func (mr *MockRedisInterfaceMockRecorder) XGroupCreate(stream, group, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupCreate", reflect.TypeOf((*MockRedisInterface)(nil).XGroupCreate), stream, group, start)
}

// XGroupCreateMkStream mocks base method.
func (m *MockRedisInterface) XGroupCreateMkStream(stream, group, start string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupCreateMkStream", stream, group, start)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// XGroupCreateMkStream indicates an expected call of XGroupCreateMkStream.
func (mr *MockRedisInterfaceMockRecorder) XGroupCreateMkStream(stream, group, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupCreateMkStream", reflect.TypeOf((*MockRedisInterface)(nil).XGroupCreateMkStream), stream, group, start)
}

// XGroupDelConsumer mocks base method.
func (m *MockRedisInterface) XGroupDelConsumer(stream, group, consumer string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupDelConsumer", stream, group, consumer)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XGroupDelConsumer indicates an expected call of XGroupDelConsumer.
func (mr *MockRedisInterfaceMockRecorder) XGroupDelConsumer(stream, group, consumer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupDelConsumer", reflect.TypeOf((*MockRedisInterface)(nil).XGroupDelConsumer), stream, group, consumer)
}

// XGroupDestroy mocks base method.
func (m *MockRedisInterface) XGroupDestroy(stream, group string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupDestroy", stream, group)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XGroupDestroy indicates an expected call of XGroupDestroy.
func (mr *MockRedisInterfaceMockRecorder) XGroupDestroy(stream, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupDestroy", reflect.TypeOf((*MockRedisInterface)(nil).XGroupDestroy), stream, group)
}

// XGroupSetID mocks base method.
func (m *MockRedisInterface) XGroupSetID(stream, group, start string) *redis.StatusCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XGroupSetID", stream, group, start)
	ret0, _ := ret[0].(*redis.StatusCmd)
	return ret0
}

// XGroupSetID indicates an expected call of XGroupSetID.
func (mr *MockRedisInterfaceMockRecorder) XGroupSetID(stream, group, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XGroupSetID", reflect.TypeOf((*MockRedisInterface)(nil).XGroupSetID), stream, group, start)
}

// XLen mocks base method.
func (m *MockRedisInterface) XLen(stream string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XLen", stream)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XLen indicates an expected call of XLen.
func (mr *MockRedisInterfaceMockRecorder) XLen(stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XLen", reflect.TypeOf((*MockRedisInterface)(nil).XLen), stream)
}

// XPending mocks base method.
func (m *MockRedisInterface) XPending(stream, group string) *redis.XPendingCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XPending", stream, group)
	ret0, _ := ret[0].(*redis.XPendingCmd)
	return ret0
}

// XPending indicates an expected call of XPending.
func (mr *MockRedisInterfaceMockRecorder) XPending(stream, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XPending", reflect.TypeOf((*MockRedisInterface)(nil).XPending), stream, group)
}

// XPendingExt mocks base method.
func (m *MockRedisInterface) XPendingExt(a *redis.XPendingExtArgs) *redis.XPendingExtCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XPendingExt", a)
	ret0, _ := ret[0].(*redis.XPendingExtCmd)
	return ret0
}

// XPendingExt indicates an expected call of XPendingExt.
func (mr *MockRedisInterfaceMockRecorder) XPendingExt(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XPendingExt", reflect.TypeOf((*MockRedisInterface)(nil).XPendingExt), a)
}

// XRange mocks base method.
func (m *MockRedisInterface) XRange(stream, start, stop string) *redis.XMessageSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRange", stream, start, stop)
	ret0, _ := ret[0].(*redis.XMessageSliceCmd)
	return ret0
}

// XRange indicates an expected call of XRange.
func (mr *MockRedisInterfaceMockRecorder) XRange(stream, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRange", reflect.TypeOf((*MockRedisInterface)(nil).XRange), stream, start, stop)
}

// XRangeN mocks base method.
func (m *MockRedisInterface) XRangeN(stream, start, stop string, count int64) *redis.XMessageSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRangeN", stream, start, stop, count)
	ret0, _ := ret[0].(*redis.XMessageSliceCmd)
	return ret0
}

// XRangeN indicates an expected call of XRangeN.
func (mr *MockRedisInterfaceMockRecorder) XRangeN(stream, start, stop, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRangeN", reflect.TypeOf((*MockRedisInterface)(nil).XRangeN), stream, start, stop, count)
}

// XRead mocks base method.
func (m *MockRedisInterface) XRead(a *redis.XReadArgs) *redis.XStreamSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRead", a)
	ret0, _ := ret[0].(*redis.XStreamSliceCmd)
	return ret0
}

// XRead indicates an expected call of XRead.
func (mr *MockRedisInterfaceMockRecorder) XRead(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRead", reflect.TypeOf((*MockRedisInterface)(nil).XRead), a)
}

// XReadGroup mocks base method.
func (m *MockRedisInterface) XReadGroup(a *redis.XReadGroupArgs) *redis.XStreamSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XReadGroup", a)
	ret0, _ := ret[0].(*redis.XStreamSliceCmd)
	return ret0
}

// XReadGroup indicates an expected call of XReadGroup.
func (mr *MockRedisInterfaceMockRecorder) XReadGroup(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XReadGroup", reflect.TypeOf((*MockRedisInterface)(nil).XReadGroup), a)
}

// XReadStreams mocks base method.
func (m *MockRedisInterface) XReadStreams(streams ...string) *redis.XStreamSliceCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range streams {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XReadStreams", varargs...)
	ret0, _ := ret[0].(*redis.XStreamSliceCmd)
	return ret0
}

// XReadStreams indicates an expected call of XReadStreams.
func (mr *MockRedisInterfaceMockRecorder) XReadStreams(streams ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XReadStreams", reflect.TypeOf((*MockRedisInterface)(nil).XReadStreams), streams...)
}

// XRevRange mocks base method.
func (m *MockRedisInterface) XRevRange(stream, start, stop string) *redis.XMessageSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRevRange", stream, start, stop)
	ret0, _ := ret[0].(*redis.XMessageSliceCmd)
	return ret0
}

// XRevRange indicates an expected call of XRevRange.
func (mr *MockRedisInterfaceMockRecorder) XRevRange(stream, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRevRange", reflect.TypeOf((*MockRedisInterface)(nil).XRevRange), stream, start, stop)
}

// XRevRangeN mocks base method.
func (m *MockRedisInterface) XRevRangeN(stream, start, stop string, count int64) *redis.XMessageSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRevRangeN", stream, start, stop, count)
	ret0, _ := ret[0].(*redis.XMessageSliceCmd)
	return ret0
}

// XRevRangeN indicates an expected call of XRevRangeN.
func (mr *MockRedisInterfaceMockRecorder) XRevRangeN(stream, start, stop, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRevRangeN", reflect.TypeOf((*MockRedisInterface)(nil).XRevRangeN), stream, start, stop, count)
}

// XTrim mocks base method.
func (m *MockRedisInterface) XTrim(key string, maxLen int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XTrim", key, maxLen)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XTrim indicates an expected call of XTrim.
func (mr *MockRedisInterfaceMockRecorder) XTrim(key, maxLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XTrim", reflect.TypeOf((*MockRedisInterface)(nil).XTrim), key, maxLen)
}

// XTrimApprox mocks base method.
func (m *MockRedisInterface) XTrimApprox(key string, maxLen int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XTrimApprox", key, maxLen)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// XTrimApprox indicates an expected call of XTrimApprox.
func (mr *MockRedisInterfaceMockRecorder) XTrimApprox(key, maxLen interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XTrimApprox", reflect.TypeOf((*MockRedisInterface)(nil).XTrimApprox), key, maxLen)
}

// ZAdd mocks base method.
func (m *MockRedisInterface) ZAdd(key string, members ...redis.Z) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAdd", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAdd indicates an expected call of ZAdd.
func (mr *MockRedisInterfaceMockRecorder) ZAdd(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAdd", reflect.TypeOf((*MockRedisInterface)(nil).ZAdd), varargs...)
}

// ZAddCh mocks base method.
func (m *MockRedisInterface) ZAddCh(key string, members ...redis.Z) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddCh", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAddCh indicates an expected call of ZAddCh.
func (mr *MockRedisInterfaceMockRecorder) ZAddCh(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddCh", reflect.TypeOf((*MockRedisInterface)(nil).ZAddCh), varargs...)
}

// ZAddNX mocks base method.
func (m *MockRedisInterface) ZAddNX(key string, members ...redis.Z) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddNX", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAddNX indicates an expected call of ZAddNX.
func (mr *MockRedisInterfaceMockRecorder) ZAddNX(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddNX", reflect.TypeOf((*MockRedisInterface)(nil).ZAddNX), varargs...)
}

// ZAddNXCh mocks base method.
func (m *MockRedisInterface) ZAddNXCh(key string, members ...redis.Z) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddNXCh", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAddNXCh indicates an expected call of ZAddNXCh.
func (mr *MockRedisInterfaceMockRecorder) ZAddNXCh(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddNXCh", reflect.TypeOf((*MockRedisInterface)(nil).ZAddNXCh), varargs...)
}

// ZAddXX mocks base method.
func (m *MockRedisInterface) ZAddXX(key string, members ...redis.Z) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddXX", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAddXX indicates an expected call of ZAddXX.
func (mr *MockRedisInterfaceMockRecorder) ZAddXX(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddXX", reflect.TypeOf((*MockRedisInterface)(nil).ZAddXX), varargs...)
}

// ZAddXXCh mocks base method.
func (m *MockRedisInterface) ZAddXXCh(key string, members ...redis.Z) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZAddXXCh", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZAddXXCh indicates an expected call of ZAddXXCh.
func (mr *MockRedisInterfaceMockRecorder) ZAddXXCh(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZAddXXCh", reflect.TypeOf((*MockRedisInterface)(nil).ZAddXXCh), varargs...)
}

// ZCard mocks base method.
func (m *MockRedisInterface) ZCard(key string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCard", key)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZCard indicates an expected call of ZCard.
func (mr *MockRedisInterfaceMockRecorder) ZCard(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCard", reflect.TypeOf((*MockRedisInterface)(nil).ZCard), key)
}

// ZCount mocks base method.
func (m *MockRedisInterface) ZCount(key, min, max string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCount", key, min, max)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZCount indicates an expected call of ZCount.
func (mr *MockRedisInterfaceMockRecorder) ZCount(key, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCount", reflect.TypeOf((*MockRedisInterface)(nil).ZCount), key, min, max)
}

// ZIncr mocks base method.
func (m *MockRedisInterface) ZIncr(key string, member redis.Z) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncr", key, member)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// ZIncr indicates an expected call of ZIncr.
func (mr *MockRedisInterfaceMockRecorder) ZIncr(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncr", reflect.TypeOf((*MockRedisInterface)(nil).ZIncr), key, member)
}

// ZIncrBy mocks base method.
func (m *MockRedisInterface) ZIncrBy(key string, increment float64, member string) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncrBy", key, increment, member)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// ZIncrBy indicates an expected call of ZIncrBy.
func (mr *MockRedisInterfaceMockRecorder) ZIncrBy(key, increment, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncrBy", reflect.TypeOf((*MockRedisInterface)(nil).ZIncrBy), key, increment, member)
}

// ZIncrNX mocks base method.
func (m *MockRedisInterface) ZIncrNX(key string, member redis.Z) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncrNX", key, member)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// ZIncrNX indicates an expected call of ZIncrNX.
func (mr *MockRedisInterfaceMockRecorder) ZIncrNX(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncrNX", reflect.TypeOf((*MockRedisInterface)(nil).ZIncrNX), key, member)
}

// ZIncrXX mocks base method.
func (m *MockRedisInterface) ZIncrXX(key string, member redis.Z) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZIncrXX", key, member)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// ZIncrXX indicates an expected call of ZIncrXX.
func (mr *MockRedisInterfaceMockRecorder) ZIncrXX(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZIncrXX", reflect.TypeOf((*MockRedisInterface)(nil).ZIncrXX), key, member)
}

// ZInterStore mocks base method.
func (m *MockRedisInterface) ZInterStore(destination string, store redis.ZStore, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{destination, store}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZInterStore", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZInterStore indicates an expected call of ZInterStore.
func (mr *MockRedisInterfaceMockRecorder) ZInterStore(destination, store interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{destination, store}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZInterStore", reflect.TypeOf((*MockRedisInterface)(nil).ZInterStore), varargs...)
}

// ZLexCount mocks base method.
func (m *MockRedisInterface) ZLexCount(key, min, max string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZLexCount", key, min, max)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZLexCount indicates an expected call of ZLexCount.
func (mr *MockRedisInterfaceMockRecorder) ZLexCount(key, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZLexCount", reflect.TypeOf((*MockRedisInterface)(nil).ZLexCount), key, min, max)
}

// ZPopMax mocks base method.
func (m *MockRedisInterface) ZPopMax(key string, count ...int64) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range count {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZPopMax", varargs...)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZPopMax indicates an expected call of ZPopMax.
func (mr *MockRedisInterfaceMockRecorder) ZPopMax(key interface{}, count ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, count...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZPopMax", reflect.TypeOf((*MockRedisInterface)(nil).ZPopMax), varargs...)
}

// ZPopMin mocks base method.
func (m *MockRedisInterface) ZPopMin(key string, count ...int64) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range count {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZPopMin", varargs...)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZPopMin indicates an expected call of ZPopMin.
func (mr *MockRedisInterfaceMockRecorder) ZPopMin(key interface{}, count ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, count...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZPopMin", reflect.TypeOf((*MockRedisInterface)(nil).ZPopMin), varargs...)
}

// ZRange mocks base method.
func (m *MockRedisInterface) ZRange(key string, start, stop int64) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRange", key, start, stop)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRange indicates an expected call of ZRange.
func (mr *MockRedisInterfaceMockRecorder) ZRange(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRange", reflect.TypeOf((*MockRedisInterface)(nil).ZRange), key, start, stop)
}

// ZRangeByLex mocks base method.
func (m *MockRedisInterface) ZRangeByLex(key string, opt redis.ZRangeBy) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByLex", key, opt)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRangeByLex indicates an expected call of ZRangeByLex.
func (mr *MockRedisInterfaceMockRecorder) ZRangeByLex(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByLex", reflect.TypeOf((*MockRedisInterface)(nil).ZRangeByLex), key, opt)
}

// ZRangeByScore mocks base method.
func (m *MockRedisInterface) ZRangeByScore(key string, opt redis.ZRangeBy) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByScore", key, opt)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRangeByScore indicates an expected call of ZRangeByScore.
func (mr *MockRedisInterfaceMockRecorder) ZRangeByScore(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByScore", reflect.TypeOf((*MockRedisInterface)(nil).ZRangeByScore), key, opt)
}

// ZRangeByScoreWithScores mocks base method.
func (m *MockRedisInterface) ZRangeByScoreWithScores(key string, opt redis.ZRangeBy) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeByScoreWithScores", key, opt)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRangeByScoreWithScores indicates an expected call of ZRangeByScoreWithScores.
func (mr *MockRedisInterfaceMockRecorder) ZRangeByScoreWithScores(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeByScoreWithScores", reflect.TypeOf((*MockRedisInterface)(nil).ZRangeByScoreWithScores), key, opt)
}

// ZRangeWithScores mocks base method.
func (m *MockRedisInterface) ZRangeWithScores(key string, start, stop int64) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRangeWithScores", key, start, stop)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRangeWithScores indicates an expected call of ZRangeWithScores.
func (mr *MockRedisInterfaceMockRecorder) ZRangeWithScores(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRangeWithScores", reflect.TypeOf((*MockRedisInterface)(nil).ZRangeWithScores), key, start, stop)
}

// ZRank mocks base method.
func (m *MockRedisInterface) ZRank(key, member string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRank", key, member)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRank indicates an expected call of ZRank.
func (mr *MockRedisInterfaceMockRecorder) ZRank(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRank", reflect.TypeOf((*MockRedisInterface)(nil).ZRank), key, member)
}

// ZRem mocks base method.
func (m *MockRedisInterface) ZRem(key string, members ...interface{}) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range members {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZRem", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRem indicates an expected call of ZRem.
func (mr *MockRedisInterfaceMockRecorder) ZRem(key interface{}, members ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, members...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRem", reflect.TypeOf((*MockRedisInterface)(nil).ZRem), varargs...)
}

// ZRemRangeByLex mocks base method.
func (m *MockRedisInterface) ZRemRangeByLex(key, min, max string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByLex", key, min, max)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRemRangeByLex indicates an expected call of ZRemRangeByLex.
func (mr *MockRedisInterfaceMockRecorder) ZRemRangeByLex(key, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByLex", reflect.TypeOf((*MockRedisInterface)(nil).ZRemRangeByLex), key, min, max)
}

// ZRemRangeByRank mocks base method.
func (m *MockRedisInterface) ZRemRangeByRank(key string, start, stop int64) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByRank", key, start, stop)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRemRangeByRank indicates an expected call of ZRemRangeByRank.
func (mr *MockRedisInterfaceMockRecorder) ZRemRangeByRank(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByRank", reflect.TypeOf((*MockRedisInterface)(nil).ZRemRangeByRank), key, start, stop)
}

// ZRemRangeByScore mocks base method.
func (m *MockRedisInterface) ZRemRangeByScore(key, min, max string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRemRangeByScore", key, min, max)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRemRangeByScore indicates an expected call of ZRemRangeByScore.
func (mr *MockRedisInterfaceMockRecorder) ZRemRangeByScore(key, min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRemRangeByScore", reflect.TypeOf((*MockRedisInterface)(nil).ZRemRangeByScore), key, min, max)
}

// ZRevRange mocks base method.
func (m *MockRedisInterface) ZRevRange(key string, start, stop int64) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRange", key, start, stop)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRevRange indicates an expected call of ZRevRange.
func (mr *MockRedisInterfaceMockRecorder) ZRevRange(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRange", reflect.TypeOf((*MockRedisInterface)(nil).ZRevRange), key, start, stop)
}

// ZRevRangeByLex mocks base method.
func (m *MockRedisInterface) ZRevRangeByLex(key string, opt redis.ZRangeBy) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByLex", key, opt)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRevRangeByLex indicates an expected call of ZRevRangeByLex.
func (mr *MockRedisInterfaceMockRecorder) ZRevRangeByLex(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByLex", reflect.TypeOf((*MockRedisInterface)(nil).ZRevRangeByLex), key, opt)
}

// ZRevRangeByScore mocks base method.
func (m *MockRedisInterface) ZRevRangeByScore(key string, opt redis.ZRangeBy) *redis.StringSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByScore", key, opt)
	ret0, _ := ret[0].(*redis.StringSliceCmd)
	return ret0
}

// ZRevRangeByScore indicates an expected call of ZRevRangeByScore.
func (mr *MockRedisInterfaceMockRecorder) ZRevRangeByScore(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByScore", reflect.TypeOf((*MockRedisInterface)(nil).ZRevRangeByScore), key, opt)
}

// ZRevRangeByScoreWithScores mocks base method.
func (m *MockRedisInterface) ZRevRangeByScoreWithScores(key string, opt redis.ZRangeBy) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeByScoreWithScores", key, opt)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRevRangeByScoreWithScores indicates an expected call of ZRevRangeByScoreWithScores.
func (mr *MockRedisInterfaceMockRecorder) ZRevRangeByScoreWithScores(key, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeByScoreWithScores", reflect.TypeOf((*MockRedisInterface)(nil).ZRevRangeByScoreWithScores), key, opt)
}

// ZRevRangeWithScores mocks base method.
func (m *MockRedisInterface) ZRevRangeWithScores(key string, start, stop int64) *redis.ZSliceCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRangeWithScores", key, start, stop)
	ret0, _ := ret[0].(*redis.ZSliceCmd)
	return ret0
}

// ZRevRangeWithScores indicates an expected call of ZRevRangeWithScores.
func (mr *MockRedisInterfaceMockRecorder) ZRevRangeWithScores(key, start, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRangeWithScores", reflect.TypeOf((*MockRedisInterface)(nil).ZRevRangeWithScores), key, start, stop)
}

// ZRevRank mocks base method.
func (m *MockRedisInterface) ZRevRank(key, member string) *redis.IntCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZRevRank", key, member)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZRevRank indicates an expected call of ZRevRank.
func (mr *MockRedisInterfaceMockRecorder) ZRevRank(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZRevRank", reflect.TypeOf((*MockRedisInterface)(nil).ZRevRank), key, member)
}

// ZScan mocks base method.
func (m *MockRedisInterface) ZScan(key string, cursor uint64, match string, count int64) *redis.ScanCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZScan", key, cursor, match, count)
	ret0, _ := ret[0].(*redis.ScanCmd)
	return ret0
}

// ZScan indicates an expected call of ZScan.
func (mr *MockRedisInterfaceMockRecorder) ZScan(key, cursor, match, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZScan", reflect.TypeOf((*MockRedisInterface)(nil).ZScan), key, cursor, match, count)
}

// ZScore mocks base method.
func (m *MockRedisInterface) ZScore(key, member string) *redis.FloatCmd {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZScore", key, member)
	ret0, _ := ret[0].(*redis.FloatCmd)
	return ret0
}

// ZScore indicates an expected call of ZScore.
func (mr *MockRedisInterfaceMockRecorder) ZScore(key, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZScore", reflect.TypeOf((*MockRedisInterface)(nil).ZScore), key, member)
}

// ZUnionStore mocks base method.
func (m *MockRedisInterface) ZUnionStore(dest string, store redis.ZStore, keys ...string) *redis.IntCmd {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest, store}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ZUnionStore", varargs...)
	ret0, _ := ret[0].(*redis.IntCmd)
	return ret0
}

// ZUnionStore indicates an expected call of ZUnionStore.
func (mr *MockRedisInterfaceMockRecorder) ZUnionStore(dest, store interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest, store}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZUnionStore", reflect.TypeOf((*MockRedisInterface)(nil).ZUnionStore), varargs...)
}
