// Code generated by MockGen. DO NOT EDIT.
// Source: ./insrequester/requester.go

// Package insrequester is a generated GoMock package.
package insrequester

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRequester is a mock of Requester interface.
type MockRequester struct {
	ctrl     *gomock.Controller
	recorder *MockRequesterMockRecorder
}

// MockRequesterMockRecorder is the mock recorder for MockRequester.
type MockRequesterMockRecorder struct {
	mock *MockRequester
}

// NewMockRequester creates a new mock instance.
func NewMockRequester(ctrl *gomock.Controller) *MockRequester {
	mock := &MockRequester{ctrl: ctrl}
	mock.recorder = &MockRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequester) EXPECT() *MockRequesterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRequester) Delete(re RequestEntity) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", re)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRequesterMockRecorder) Delete(re interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRequester)(nil).Delete), re)
}

// Get mocks base method.
func (m *MockRequester) Get(re RequestEntity) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", re)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRequesterMockRecorder) Get(re interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRequester)(nil).Get), re)
}

// Load mocks base method.
func (m *MockRequester) Load() *Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(*Request)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockRequesterMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockRequester)(nil).Load))
}

// Post mocks base method.
func (m *MockRequester) Post(re RequestEntity) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", re)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockRequesterMockRecorder) Post(re interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockRequester)(nil).Post), re)
}

// Put mocks base method.
func (m *MockRequester) Put(re RequestEntity) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", re)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockRequesterMockRecorder) Put(re interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockRequester)(nil).Put), re)
}

// WithCircuitbreaker mocks base method.
func (m *MockRequester) WithCircuitbreaker(config CircuitBreakerConfig) *Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCircuitbreaker", config)
	ret0, _ := ret[0].(*Request)
	return ret0
}

// WithCircuitbreaker indicates an expected call of WithCircuitbreaker.
func (mr *MockRequesterMockRecorder) WithCircuitbreaker(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCircuitbreaker", reflect.TypeOf((*MockRequester)(nil).WithCircuitbreaker), config)
}

// WithHeaders mocks base method.
func (m *MockRequester) WithHeaders(headers Headers) *Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithHeaders", headers)
	ret0, _ := ret[0].(*Request)
	return ret0
}

// WithHeaders indicates an expected call of WithHeaders.
func (mr *MockRequesterMockRecorder) WithHeaders(headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithHeaders", reflect.TypeOf((*MockRequester)(nil).WithHeaders), headers)
}

// WithRetry mocks base method.
func (m *MockRequester) WithRetry(config RetryConfig) *Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRetry", config)
	ret0, _ := ret[0].(*Request)
	return ret0
}

// WithRetry indicates an expected call of WithRetry.
func (mr *MockRequesterMockRecorder) WithRetry(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRetry", reflect.TypeOf((*MockRequester)(nil).WithRetry), config)
}

// WithTimeout mocks base method.
func (m *MockRequester) WithTimeout(timeoutSeconds int) *Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTimeout", timeoutSeconds)
	ret0, _ := ret[0].(*Request)
	return ret0
}

// WithTimeout indicates an expected call of WithTimeout.
func (mr *MockRequesterMockRecorder) WithTimeout(timeoutSeconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTimeout", reflect.TypeOf((*MockRequester)(nil).WithTimeout), timeoutSeconds)
}
